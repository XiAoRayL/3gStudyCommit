#define SIZE 21
typedef struct node {
	int data;
	struct node* lptr, * rptr;
}jchhh_;

jchhh_ q[SIZE + 10];
int head, tail;
void CENG(jchhh_* NODE)				//NODE已经在队列中		存储在队列的第0号位置
{
	if (NODE == NULL)				//没有了就返回
		return;
	if (NODE->lptr != NULL)			//检查左子树
	{
		q[tail] = *(NODE->lptr);		//入队操作
		++tail;
	}
	if (NODE->rptr != NULL)			//检查右子树
	{
		q[tail] = *(NODE->rptr);		//入队操作
		++tail;
	}
	prt1(NODE);							//访问当前节点
	++head;								//当前节点出队
	if (head >= tail)					
		return;						//如果队列为空，那就啥也不用干了
	else
	{
		CENG(&q[head]);				//否则的话，，访问队列中下一个节点
	}
	return;						//再见 = =//
}


void prt1(jchhh_* NODE)			//打印节点数据
{
	std::cout << "这个节点的数据是" << NODE->data << " 哈哈哈" << std::endl;
	return;
}